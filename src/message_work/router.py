from datetime import datetime

from aiogram import Router, html, F
from aiogram.types import Message
from aiogram.filters.command import Command, CommandObject, CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.formatting import (
    Text, Bold, as_list, as_marked_section, as_key_value, HashTag
)

from command_list import CommandList

router = Router(
    name="–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º"
)

command_list = CommandList(
    name="–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: ",
    commands=[
        "/start",
        "/reply",
        "/dice",
        "/parse_mode",
        "/hello_user",
        "/marked_sections",
        "/format_save",
        "/get_entities",
        "/set_timer",
        "/generate_deeplink"
    ],
)


@router.message(Command("reply"))
async def command_reply(message: Message):
    ''' Reply –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '''
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º")

@router.message(Command("dice"))
async def command_dice(message: Message):
    ''' –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–æ–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∏–≥—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ—Å—Ç—è–º–∏) '''
    await message.answer_dice(emoji="üé≤")
    await message.answer_dice(emoji="üéØ")
    await message.answer_dice(emoji="üèÄ")
    await message.answer_dice(emoji="‚öΩ")
    await message.answer_dice(emoji="üé≥")
    await message.answer_dice(emoji="üé∞")

@router.message(Command("parse_mode"))
async def command_parse_mode(message: Message):
    '''
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–∫–æ–π-–ª–∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–æ–π. 
    –î–ª—è –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:

    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    '''

    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ —Å <b>HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π</b>!",
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ —Å *MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫–æ–π*",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏",
        parse_mode=None
    )

@router.message(Command("hello_user"))
async def command_hello(message: Message):
    ''' –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–µ. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '''
    content = Text(
        "Hello, ",
        Bold(message.from_user.full_name)
    )
    await message.answer(**content.as_kwargs())

@router.message(Command("marked_sections"))
async def command_marked_sections(message: Message):
    ''' –•–µ–Ω–¥–ª–µ—Ä, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '''

    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 2",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 3",
            "Test 5",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 5),
            as_key_value("Success", 3),
            as_key_value("Failed", 2),
            marker="   ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())

@router.message(Command("format_save"))
async def command_format_save(message: Message):
    ''' –°–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '''

    time_now = datetime.now().strftime("%H:%M")
    time_now = html.underline(time_now)

    await message.answer(
        f"{message.html_text}\n\n{time_now}",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("get_entities"))
async def command_get_entities(message: Message):
    ''' –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä–æ–ª–µ–π, –ø–æ—á—Ç, —Å–∞–π—Ç–æ–≤ –∏ —Ç.–¥.) '''
    
    data = []

    entities = message.entities or []
    for item in entities:
        data.append((
            item.type, 
            item.extract_from(message.text),
        ))
    
    content = as_list(
        *(
            f"{item[0]}: {item[1]}" for item in data
        ),
        sep="\n\n",
    )

    await message.answer(**content.as_kwargs())

@router.message(Command("set_timer"))
async def command_set_timer(
    message: Message,
    command: CommandObject,
):
    ''' –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '''

    args = command.args

    if not args or len(args.split()) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /set_timer <time> <message>"
        )
        return

    delay_time, message_text = args.split()

    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {message_text}"
    )

@router.message(CommandStart(
    deep_link=True,
))
async def command_start_with_token(
    message: Message,
    command: CommandObject,
):
    ''' –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏–ø–ª–∏–Ω–∫–æ–≤ '''
    token = command.args
    await message.answer(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∏–ø–ª–∏–Ω–∫ —Å —Ç–æ–∫–µ–Ω–æ–º:\n"
        f"token: {token}"
    )

@router.message(CommandStart(
    deep_link=False
))
async def command_start(message: Message):
    ''' –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥. answer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç '''
    await message.answer("Hello! Input /help")

@router.message(Command("generate_deeplink"))
async def command_generate_deeplink(message: Message):
    ''' –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–ø–ª–∏–Ω–∫–∞ '''
    await message.answer(
        "t.me/test_athena_telegram_bot?start=DSFIJJdsajfiafd"
    )

@router.message(F.sticker)
async def echo_gif(message: Message):
    ''' 
    file_id - –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π id (—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä) 
    file_unique_id - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π id
    '''
    await message.reply_sticker(message.sticker.file_id)